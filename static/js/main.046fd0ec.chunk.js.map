{"version":3,"sources":["components/Grid/index.js","components/Nav/index.js","components/PictureContainer/index.js","components/Picture/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","fluid","children","className","Nav","props","start","correct","score","topScore","PictureContainer","Picture","onClick","id","alt","name","src","image","App","state","pictures","seenPictures","shuffle","sort","Math","random","update","setState","checkTopScore","reset","handleOnClick","length","includes","pics","push","this","map","picture","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sqCAKO,SAASA,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OAAO,yBAAKC,UAAS,mBAAcF,EAAQ,SAAW,KAAOC,GCmBhDE,MAtBf,SAAaC,GACT,OACI,yBAAKF,UAAU,8BACX,6BACI,4CAEJ,yBAAKA,UAAWE,EAAMC,MAAQ,UAAY,UACrCD,EAAME,QAAU,qDAAiC,wDAEtD,yBAAKJ,UAAWE,EAAMC,MAAQ,SAAW,0CACrC,sDACI,6BADJ,kCAIJ,6BACI,sCAAYD,EAAMG,MAAlB,iBAAuCH,EAAMI,a,eCN9CC,G,MATU,SAAC,GAAD,IAAER,EAAF,EAAEA,SAAF,OAErB,yBAAKC,UAAU,2CACVD,K,MCHM,SAASS,EAASN,GAC7B,OACI,yBAAKF,UAAU,UAAUS,QAAS,kBAAMP,EAAMO,QAAQP,EAAMQ,MAExD,yBAAKV,UAAU,0BAA0BW,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,S,ICmGlEC,E,4MA9FbC,MAAQ,CACNC,WACAC,aAAc,GACdf,OAAO,EACPC,SAAS,EACTC,MAAO,EACPC,SAAU,G,EAKZa,QAAU,WAER,EAAKH,MAAMC,SAASG,MAAK,kBAAMC,KAAKC,SAAW,O,EAGjDC,OAAS,WAEP,EAAKC,SAAS,CAACnB,MAAO,EAAKW,MAAMX,MAAQ,IAEzC,EAAKoB,gBAEL,EAAKN,W,EAGPM,cAAgB,WAEV,EAAKT,MAAMX,MAAQ,EAAKW,MAAMV,UAEhC,EAAKkB,SAAS,CAAClB,SAAU,EAAKU,MAAMX,S,EAIxCqB,MAAQ,WAEN,EAAKP,UAEL,EAAKK,SAAU,CAAErB,OAAO,IAExB,EAAKqB,SAAS,CAACnB,MAAO,IAEtB,EAAKmB,SAAS,CAACN,aAAc,M,EAI/BS,cAAgB,SAACjB,GAMf,GAJuC,IAAnC,EAAKM,MAAME,aAAaU,QAC1B,EAAKJ,SAAS,CAAErB,OAAO,IAGrB,EAAKa,MAAME,aAAaW,SAASnB,GAEnC,EAAKc,SAAS,CAAEpB,SAAS,IAEzB,EAAKsB,YACA,CAEL,IAAII,EAAO,EAAKd,MAAME,aACtBY,EAAKC,KAAKrB,GACV,EAAKc,SAAS,CAAEN,aAAcY,IAC9B,EAAKN,SAAS,CAAEpB,SAAS,IAEzB,EAAKmB,W,uDAIC,IAAD,OACP,OACE,kBAAC1B,EAAD,KACE,kBAAC,EAAD,CACEM,MAAO6B,KAAKhB,MAAMb,MAClBC,QAAS4B,KAAKhB,MAAMZ,QACpBC,MAAO2B,KAAKhB,MAAMX,MAClBC,SAAU0B,KAAKhB,MAAMV,WAGvB,kBAAC,EAAD,KAEG0B,KAAKhB,MAAMC,SAASgB,KAAI,SAAAC,GAAO,OAC9B,kBAAC1B,EAAD,CACEE,GAAIwB,EAAQxB,GACZyB,IAAKD,EAAQC,IACbrB,MAAOoB,EAAQpB,MACfL,QAAS,EAAKkB,yB,GArFVS,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.046fd0ec.chunk.js","sourcesContent":["import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n// import \"./style.css\";\n\nfunction Nav(props) {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <div>\n                <h1>Clicky Game</h1>\n            </div>\n            <div className={props.start ? \"d-block\" : \"d-none\"}>\n                {props.correct ? <h3>You guessed correctly</h3> : <h3>You guessed incorrectly</h3>}\n            </div>\n            <div className={props.start ? \"d-none\" : \"d-block text-center bg-white px-4 py-2\"}>\n                <h5>Click on as many images \n                    <br/>as you can without repeating!</h5>\n            </div>\n\n            <div>\n                <h4>Score: {props.score} | Top Score: {props.topScore}</h4>\n            </div>\n\n        </nav>\n    );\n}\n\nexport default Nav;","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nconst PictureContainer = ({children}) => (\n    \n    <div className=\"d-flex justify-content-center flex-wrap\">\n        {children}\n    </div>\n)\n\n\n\nexport default PictureContainer;","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Picture (props) {\n    return (\n        <div className=\"picture\" onClick={() => props.onClick(props.id)}>\n            {/* <div className=\"img-container\"> */}\n            <img className=\"shadow bg-white rounded\" alt={props.name} src={props.image} />\n            {/* </div> */}\n        </div>\n    )\n}","import React, { Component } from 'react';\n// import PictureContainer from \"./components/PictureContainer\";\nimport { Container} from \"./components/Grid\";\nimport Nav from \"./components/Nav\";\n// import Footer from \"./components/Footer\";\nimport './App.css';\nimport pictures from \"./photos.json\"\nimport PictureContainer from './components/PictureContainer';\nimport Picture from \"./components/Picture\";\n\n\nclass App extends Component {\n  state = {\n    pictures,\n    seenPictures: [],\n    start: false,\n    correct: false,\n    score: 0,\n    topScore: 0\n\n  };\n\n\n  shuffle = () => {\n    // Shuffle pictures\n    this.state.pictures.sort(() => Math.random() - 0.5);\n  }\n\n  update = () => {\n    // Increase Score\n    this.setState({score: this.state.score + 1});\n    // Check Top Score\n    this.checkTopScore();\n    // Shuffle board\n    this.shuffle();\n  }\n\n  checkTopScore = () => {\n    // If high score beat\n    if (this.state.score > this.state.topScore) {\n      // Update high score\n      this.setState({topScore: this.state.score});\n    }\n  }\n\n  reset = () => {\n    // Shuffle cards\n    this.shuffle();\n    // Start -> false\n    this.setState( { start: false });\n    // Reset score\n    this.setState({score: 0});\n    // Reset pictureIds\n    this.setState({seenPictures: []})\n\n  }\n\n  handleOnClick = (id) => {\n    // Start game \n    if (this.state.seenPictures.length === 0) {\n      this.setState({ start: true });\n    }\n    // Check picture previously clicked\n    if (this.state.seenPictures.includes(id)) {\n      // Set correct to false\n      this.setState({ correct: false });\n      // Reset\n      this.reset();\n    } else {\n      // Clicked new picture\n      let pics = this.state.seenPictures;\n      pics.push(id);\n      this.setState({ seenPictures: pics});\n      this.setState({ correct: true });\n      // Update score and board\n      this.update();\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Nav\n          start={this.state.start}\n          correct={this.state.correct}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n\n        <PictureContainer>\n\n          {this.state.pictures.map(picture => (\n            <Picture\n              id={picture.id}\n              key={picture.key}\n              image={picture.image}\n              onClick={this.handleOnClick}\n            />\n          ))}\n        </PictureContainer>\n\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}